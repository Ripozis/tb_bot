 # -*- coding: utf-8 -*-
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery, Message,\
    InlineKeyboardButton, InlineKeyboardMarkup, user
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from sql import read_tbl,moder_msgid,publication_attribute_update,to_remove,content_error_update,sql_update, post_on_publik_all,for_editing
import os
import time
from pyrogram import Client, filters
import requests
from loguru import logger
from auth_date import token
import subprocess
import signal

logger.add("logger/bot_log.log", format="{time:YYYY-MM-DD at HH:mm:ss}|{level}|{message}", rotation="100 MB", compression="zip")
bot = Bot(token=token)
dp =Dispatcher(bot, storage=MemoryStorage())
path_img = str(r'C:\\Users\\–ò–ª—å—è\\Desktop\\tb_bot\\tb_bot\\images')
path_img_file = str(r'C:\\Users\\–ò–ª—å—è\\Desktop\\tb_bot\\tb_bot\\images\\')

# path_img = r'/root/tb_bot/images'
# path_img_file = r'/root/tb_bot/images/'

@logger.catch
@dp.message_handler(commands="start")
async def start(message: types.Message):
    ### –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Å–ø–∏—Å–æ–∫
    userid = int(message.from_user.id)

    if 467601941 == userid:
        logger.debug("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ–¥ –∞–¥–º–∏–Ω–æ–º")
        start_buttons = ["–ü–æ—Å—Ç –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ", "–í—Å–µ –ø–æ—Å—Ç—ã –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"]
        keyboard =types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*start_buttons)
        await message.answer("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üëç", reply_markup=keyboard)
    else:
        await message.answer("–£—Ö–æ–¥–∏))")


#–í—ã–≤–æ–¥ –∫–ª–∞–≤—ã
@logger.catch
@dp.message_handler(Text(equals="–ü–æ—Å—Ç –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ"))
async def test_message(message: types.Message):
    # await message.answer('–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞', reply_markup=lnkb)
    re = read_tbl() 
    row = len(re) # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
    print(row) 
    # –ü—Ä–æ—Ö–æ–¥–∏–º –≤ —Ü–∏–∫–ª–µ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –º–æ–¥–µ—Ä–∫—É
    logger.debug("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:" + str(re))
    for row in re:
        title = (row[0]) # –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∞–µ–º 1–µ –∑–Ω–∞—á–µ–Ω–µ–∏–µ - title
        url_link = (row[1]) # –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∞–µ–º 2–µ –∑–Ω–∞—á–µ–Ω–µ–∏–µ - url
        id_post = str((row[3]))
        date_publication = str((row[4]))
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        # –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–µ–µ–µ –≤ —Å—Å—ã–ª–∫–µ .jpeg, .png, .jpg –∏–ª–∏ .mp4. –í–æ–∑–º–æ–∂–Ω–æ –≤ —Å–∞–º–æ–º –ø–∞—Ä—Å–µ—Ä–µ (?)
        lin = url_link.split('/')[-1] #–≤—ã—è–≤–ª—è–µ—Ç –ø–æ —Å–ª–µ—à—É –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        lin = str(id_post) + lin # –¥–æ–±–∞–≤–ª—è–µ–º id –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        path_file = str(lin)
        logger.debug("–§–∞–π–ª –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É: " + str(path_file))
        
        def content_upload_img(url_link,lin,path_file):
            """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫—Ä–æ–º–µ –≤–∏–¥–µ–æ"""
            r = requests.get(url_link, allow_redirects=True)
            print("–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫")
            os.chdir(path_img) 
            open(lin, 'wb').write(r.content)
            sql_update(url_link, path_file)
        
        def content_upload_video(url_link,id_post):
            """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∏ —Å–∫–ª–µ–π–∫–∏ —Å –∞—É–¥–∏–æ"""
            os.chdir(path_img) # –¥–ª—è –≤–∏–Ω–¥—ã
            print(url_link)
            dash_url = url_link
            title = 'video'
            dash_url = url_link[:int(dash_url.find('DASH')) + 4]
            print("–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ dash_url: " + dash_url)
            video_url = f'{url_link}'    # this URL will be used to download the video
            print(video_url)
            audio_url = f'{dash_url}_audio.mp4'    # this URL will be used to download the      audio part
            print(audio_url)
            path_video = path_img_file + f'{id_post}_video.mp4' # –¥–ª—è –≤–∏–Ω–¥—ã 
            
            if os.path.exists(path_video):
                print("—Ñ–∞–π–ª –±—ã–ª —Ä–∞–Ω–µ–µ —Å–∫–∞—á–∞–Ω")
            else:    
                    x = requests.head(video_url) # –ö–∞—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                    ContentLength = int(x.headers.get('Content-Length'))
                    response = requests.get(video_url, allow_redirects=True, stream=True)
                    logger.debug("—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: " + str(response))

                    if ContentLength > 52428800:
                        logger.exception("–í–∏–¥–µ–æ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
                        os.remove(path_img_file + f'{id_post}_video.mp4')
                        content_error_update(id_post)
                    else:
                        if(response.status_code == 200):
                            print('–ø–æ–ª—É—á–∏–ª–∏ 200')
                            with open(f'{id_post}_{title}_video.mp4','wb') as file:
                                file.write(response.content)
                            file.close()
                            print('Downloading Audio...',end = '',flush = True)
                            print(audio_url)
                            response = requests.get(audio_url,allow_redirects=True)
                            if(response.status_code == 200):
                                with open(f'{id_post}_{title}_audio.mp4','wb') as file:
                                    print('Downloading Video...',end='', flush = True)
                                    file.write(response.content)
                                    print('\rAudio Downloaded...!')
                                    print("–ò–¥–µ—Ç —Å–∫–ª–µ–π–∫–∞ ")
                                    subprocess.call(['ffmpeg','-i',f'{id_post}_{title}_video.mp4','-i',f'{id_post}_{title}_audio.mp4','-map','0:v', '-map','1:a','-c:v','copy', f'{id_post}_{title}.mp4'])
                                    path_file = f'{id_post}_{title}.mp4'
                                    sql_update(url_link, path_file)
                                file.close()
                            else:
                                print('\rAudio Download Failed..!')
                                time.sleep(5)
                                logger.exception("Audio Download Failed")
                                print("–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–∫–ª–µ–π–∫–∏ —Å –∞—É–¥–∏–æ")
                                try:
                                    os.rename(path_img_file + f'{id_post}_{title}_video.mp4', path_img_file +  f'{id_post}_{title}.mp4') # –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–∫–ª–µ–π–∫–∏ —Å    –∞—É–¥–∏–æ
                                    # os.rename(r'/home/ripo/tb_bot/images/' + f'{id_post}_{title}_video.mp4',r'/home/ripo/tb_bot/images/' +  f'{id_post}_{title}.mp4') # –¥–ª—è   —Å–µ—Ä–≤–µ—Ä–∞
                                    # print("—É–¥–∞–ª–µ–Ω–∏–µ –±–∏—Ç–æ–≥–æ –∞—É–¥–∏–æ")
                                    # os.remove(path_img_file + f'{id_post}_{title}_audio.mp4')
                                    path_file = f'{id_post}_{title}.mp4'
                                    sql_update(url_link, path_file)
                                except Exception as ex:
                                    print("–ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—Ç—å —Ñ–∞–π–ª ")
                                    os.rename(path_img_file + f'{id_post}_{title}_video.mp4', path_img_file +  f'{id_post}_{title}.mp4')
                        else:
                            print('\rVideo Download Failed..!')
                            logger.exception("rVideo Download Failed")
                            content_error_update(id_post)

            file_path_video = path_img_file + f'{id_post}_{title}_video.mp4' # –¥–ª—è –≤–∏–Ω–¥—ã 
            file_path_audio = path_img_file + f'{id_post}_{title}_audio.mp4' # –¥–ª—è –≤–∏–Ω–¥—ã 
            
            if os.path.exists(file_path_video):
                    print("–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç " + f'{id_post}_{title}_video.mp4'+ "–±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å")
                    os.remove(path_img_file + f'{id_post}_{title}_video.mp4') # —É–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª      
            else:
                print("–§–∞–π–ª" + f'{id_post}_{title}_video.mp4' +" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            if os.path.exists(file_path_audio):
                print("–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç " + f'{id_post}_{title}_audio.mp4'+ "–±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å")
                os.remove(path_img_file + f'{id_post}_{title}_audio.mp4')
                
            else:
                print("–§–∞–π–ª" + f'{id_post}_{title}_audio.mp4' +" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            path_file = f'{id_post}_{title}.mp4'
            print(path_file)
            sql_update(url_link, path_file)
            return path_file #–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –±–æ—Ç

        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º 
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º: " + str(path_file))
            if '.jpg' in path_file or '.png' in path_file or '.jpeg' in path_file or '.gif' in path_file:
                logger.debug("–ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è " + str(path_file))
                content_upload_img(url_link,lin,path_file)
                path_fi = open(path_img_file + path_file, 'rb') # –¥–ª—è –≤–∏–Ω–¥—ã
                # path_fi = open('/home/ripo/tb_bot/images/' + path_file, 'rb') # –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
                logger.debug("–ü—É—Ç—å —Ñ–∞–π–ª–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É: " + str(path_fi))

                if '.gif' in path_file:
                    logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: " + str(path_file))
                    try: 
                        await bot.send_animation(chat_id=message.from_user.id, animation=path_fi, reply_markup=lnkb, caption=(title + '\n' + '/id:' + str(id_post) + '\n' + "–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: " +   str(date_publication)))
                        moder_id = message.message_id + 1
                        moder_msgid(moder_id, id_post)
                        logger.success("–í –ë–î –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω id —Å–æ–æ–±—â–µ–Ω–∏—è: " + str(moder_id))
                    except Exception as ex:
                        logger.exception("–û—à–∏–±–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –¥–ª—è DEV"  + str(path_file))
                        content_error_update(id_post) #–ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç —Å –æ—à–∏–±–∫–æ–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                        await message.answer('–ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞')
                        os.remove(path_img_file +str(path_file))

                        # print("–û—à–∏–±–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –¥–ª—è DEV" + path_file)
                        # print(ex)

                elif '.jpg' in path_file or '.png' in path_file or '.jpeg' in url_link:
                    logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + str(path_file))
                    try:
                        await bot.send_photo(chat_id=message.from_user.id, photo=path_fi, reply_markup=lnkb, caption=(title + '\n' + '/id:' + str(id_post) + '\n' + "–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: " +   str(date_publication)))
                        moder_id = message.message_id + 1
                        moder_msgid(moder_id, id_post)
                        logger.success("–í –ë–î –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω id —Å–æ–æ–±—â–µ–Ω–∏—è: " + str(moder_id))
                    except Exception as ex:
                        logger.exception("–û—à–∏–±–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –¥–ª—è DEV " + str(path_file))
                        content_error_update(id_post) #–ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç —Å –æ—à–∏–±–∫–æ–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                        await message.answer('–§–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞')
                        os.remove(path_img_file +str(path_file))

                        # print("–û—à–∏–±–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –¥–ª—è DEV" + path_file)
                        # print(ex)

            elif '.mp4' in path_file:
                # print ("–ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–ø—É—Å—Ç–∏–ª")
                # path_file = content_upload_video(url_link,id_post)
                # print ("–≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –∑–∞–ø—É—Å—Ç–∏–ª")
                try:
                    path = open(path_img_file + content_upload_video(url_link,id_post), 'rb') # –¥–ª—è –≤–∏–Ω–¥—ã
                # path = open('/home/ripo/tb_bot/images/' + content_upload_video(url_link,id_post), 'rb') # –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
                    logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ " + str(path_file))
                except Exception as ex:
                    content_error_update(id_post) 
                    await message.answer('–í–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏')
                    os.remove(path_img_file + f'{id_post}_video.mp4')
                # print("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ")
                try:
                    await bot.send_video(chat_id=message.from_user.id, video=path, reply_markup=lnkb, caption=(title + '\n' + '/id:' + str(id_post) + '\n' + "–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: " +   str(date_publication)))
                    moder_id = message.message_id + 1
                    moder_msgid(moder_id, id_post)
                    logger.success("–í –ë–î –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω id —Å–æ–æ–±—â–µ–Ω–∏—è: " + str(moder_id))
                except Exception as ex:
                    logger.exception("–û—à–∏–±–∫–∞ —Å –≤–∏–¥–µ–æ –¥–ª—è DEV" + str(path_file))
                    content_error_update(id_post) #–ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç —Å –æ—à–∏–±–∫–æ–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                    await message.answer('–í–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞')
                    os.remove(path_img_file + f'{id_post}_video.mp4')
                    # print("–û—à–∏–±–∫–∞ —Å –≤–∏–¥–µ–æ –¥–ª—è DEV" + path_file)
                    # print(ex)             
            else:
                logger.debug("–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è " + str(path_file) + str (id_post))
                await message.answer('–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è')
                content_error_update(id_post)
        except Exception as ex:
            logger.exception("–û—à–∏–±–∫–∞ —Å –≤–∏–¥–µ–æ –¥–ª—è DEV" + str(path_file))
            content_error_update(id_post)
            await message.answer('–í–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏')
            os.remove(path_img_file + f'{id_post}_video.mp4')

            

@logger.catch      
@dp.message_handler(Text(equals="–í—Å–µ –ø–æ—Å—Ç—ã –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"))
async def test_message(message: types.Message):
    post_on_publ_all = post_on_publik_all()
    for row in post_on_publ_all:
        post_on_publ_all = str(row[0])
        logger.success("–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
        # print(post_on_publ_all)
        await message.answer('–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é: ' + post_on_publ_all)

## –û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
lnkb = InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data='pudlik'),\
                            InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='del'),  InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='editing'))
moder_msgid
##–¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'
@logger.catch
@dp.callback_query_handler(text='pudlik')
async def public_priz(calback : types.CallbackQuery):
    moder_id = calback.message.message_id
    publication_attribute_update(moder_id) # –°–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É id –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ "1"
    logger.debug("id –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é: " + str(moder_id))
    # print(moder_id) # id –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    logger.success('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"')
    # print('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"')
    await calback.answer('–ü–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')
    await calback.message.answer('–ü–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')

##–¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–£–¥–∞–ª–∏—Ç—å'
@logger.catch
@dp.callback_query_handler(text='del')
async def public_priz(calback : types.CallbackQuery,):
    moder_id = calback.message.message_id
    to_remove(moder_id)
    logger.debug("–ü–æ—Å—Ç –ø–æ–º–µ—á–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: " + str(moder_id))
    # id –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ 
    logger.success('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"')
    # print('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"')
    await calback.answer("–ü–æ—Å—Ç –ø–æ–º–µ—á–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
    await calback.message.answer('–ü–æ—Å—Ç –ø–æ–º–µ—á–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ')

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π 
class DataInput(StatesGroup):
    kb = State()

##–¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
@logger.catch
@dp.callback_query_handler(text='editing')
async def editing(calback : types.CallbackQuery,):
    # moder_id = calback.message.message_id
    logger.success('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"')
    await DataInput.kb.set()
    @dp.message_handler(state=DataInput.kb)
    async def put_registration_number(message: types.Message, state: FSMContext):
        """–§—É–Ω–∫—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æc–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        kb_text = message.text
        re = read_tbl() 
        # –ü—Ä–æ—Ö–æ–¥–∏–º –≤ —Ü–∏–∫–ª–µ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –º–æ–¥–µ—Ä–∫—É
        logger.debug("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:" + str(re))
        for row in re:
            id_post = str((row[3]))

        print(str(id_post) +"|"+ kb_text)
        for_editing(kb_text, id_post)
        await bot.send_message(message.chat.id, '–ü–æ—Å—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω')
        await state.finish()

#----------------
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    
#----------------